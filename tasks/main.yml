---
- include_vars: "./../vars/{{ ansible_os_family }}.yml"

- name: Install apt package to facilitate CLI mail delivery (includes postfix)
  apt:
    name: mailutils
    update_cache: yes
    state: present
  when: ansible_os_family == 'Debian'

- name: Install yum package to facilitate CLI mail delivery
  yum:
    name:
      - mailx
      - postfix
    state: present
    update_cache: yes
  when: ansible_os_family == 'RedHat'

- name: Set postfix value for "inet_interfaces"
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^inet_interfaces[ ]*=[ ]*'
    insertafter: '^#inet_interfaces = '
    line: "inet_interfaces = {{ postfix_inet_interfaces }}"
    backup: true
  # Task only runs when the playbook sets a value for this.
  when: postfix_inet_interfaces != ''
  notify:
    - restart postfix

- name: Make sure postfix is started + enabled
  service:
    name: postfix
    state: started
    enabled: true

- name: Send mail for root to a real person
  lineinfile:
    dest: /etc/aliases
    regexp: "^root:"
    line: "root: {{ default_mail_recipient }}"
    state: present
    backup: true
  when: default_mail_recipient is defined
  notify:
    - execute newaliases
    - restart postfix

- name: Make sure server's public DNS name is in /etc/postfix/mydomains (mostly used by rackspace ?)
  lineinfile:
    dest: /etc/postfix/mydomains
    regexp: "^{{ inventory_hostname }}"
    line: "{{ inventory_hostname }} OK"
    state: present
    backup: true
  when: ansible_os_family == 'RedHat'
  notify:
    - postmap mydomains
    - restart postfix
  ignore_errors: true

- name: Gather EC2 facts
  ec2_metadata_facts:
  ignore_errors: true  # Obviously, this will fail if the server is not in AWS
  register: ec2_facts_result

- name: Debug ec2_facts_result
  debug:
    var: ec2_facts_result

- name: Use manually specified value for "mydestination"
  set_fact:
    _postfix_mydestination_line: > 
      mydestination = {{ postfix_mydestination }}
  when: postfix_mydestination != ''

- name: Set value for mydestination when ec2 facts are available and postfix_mydestination is not set.
  set_fact:
    _postfix_mydestination_line: >
      mydestination = $myhostname, $myhostname.$mydomain, localhost.$mydomain, localhost.localdomain, {{ ansible_ec2_local_hostname }}, {{ inventory_hostname }}, {{ inventory_hostname_short }}, {{ ansible_fqdn }}, ,localhost
  when: (not ec2_facts_result.failed)
    and ec2_facts_result.ansible_facts is defined
    and 'ansible_ec2_local_hostname' in ec2_facts_result.ansible_facts
    and postfix_mydestination == ''
  # Just because ec2_facts works, doesn't mean the variable we want will actually be in the list.

- name: Set value for mydestination when ec2 facts are not available, and postfix_mydestination is not set.
  set_fact:
    _postfix_mydestination_line: >
      mydestination = $myhostname, $myhostname.$mydomain, localhost.$mydomain, localhost.localdomain, {{ inventory_hostname }}, {{ inventory_hostname_short }}, {{ ansible_fqdn }}, ,localhost
  when: _postfix_mydestination_line is not defined
    and postfix_mydestination == ''

- name: Configure postfix "mydestination" value to prevent dropped mail from localhost. The role's auto value for this should work 
    in most cases. If mail from localhost is being dropped, consider setting the role's value for "postfix_myhostname".
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^mydestination[ ]*=[ ]*'
    #insertafter: '^#mydestination = '
    line: "{{ _postfix_mydestination_line }}"
    backup: true
  notify: reload postfix
  when: inventory_hostname != ansible_fqdn
    or postfix_myhostname is defined
    or postfix_mydestination != ''

- name: "Fix postfix 'myhostname' value. Hint: 'postfix_myhostname' needs to be defined for this to have an effect."
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^myhostname[ ]*=[ ]*'
    insertafter: '^#myhostname = '
    line: "myhostname = {{ postfix_myhostname }}"
    backup: true
  notify: reload postfix
  when: postfix_myhostname is defined

- name: Set postfix to only use ipv4 @TODO - sniff networking and skip this step when the server has a usable IPv6 connection to the outside world
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: "^inet_protocols"
    line: "inet_protocols = ipv4"
    state: present
    backup: true
  notify:
    - restart postfix

- name: Set postfix value for "relayhost"
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^relayhost[ ]*=[ ]*'
    line: "relayhost = {{ postfix_relayhost }}"
    state: "{{ 'present' if postfix_relayhost != '' else 'absent' }}"
    backup: true
  notify:
    - restart postfix

- name: Create postfix transport_maps file
  template:
    src: ../templates/etc/postfix/transport.j2
    dest: /etc/postfix/transport
  notify:
    - postmap transport
  when: (postfix_transport_maps | length) > 0

- name: Override default postfix relay host for specific domains or addresses
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: "^transport_maps[ ]*=[ ]*"
    line: transport_maps = hash:/etc/postfix/transport
    state: "{{ 'present' if (postfix_transport_maps | length) > 0 else 'absent' }}"
    backup: true
  notify:
    - restart postfix

- name: Set postfix value for "relay_domains"
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^relay_domains[ ]*=[ ]*'
    line: "relay_domains = {{ postfix_relay_domains }}"
    state: "{{ 'present' if postfix_relay_domains != '' else 'absent' }}"
    backup: true
  notify:
    - restart postfix

- name: Set postfix value for "mynetworks"
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^mynetworks[ ]*=[ ]*'
    insertafter: '^#mynetworks = '
    line: "mynetworks = {{ postfix_mynetworks }}"
    backup: true
  when: postfix_mynetworks != ''
  notify:
    - reload postfix

- name: Import TLS tasks
  import_tasks: ./tls.yml
  tags:
    - tls

- name: Enable or disable watcher service
  import_tasks: ./watcher.yml
  tags:
    - watcher
